# templates/postgres-backup-deployment.yaml
{{- if .Values.postgresBackup.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres-backup
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-backup
      {{- include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: postgres-backup
        {{- include "common.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.postgresBackup.serviceAccount.name | default (printf "%s-backup-sa" .Release.Name) }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.postgresBackup.securityContext.runAsUser | default 1000 }}
        fsGroup: {{ .Values.postgresBackup.securityContext.fsGroup | default 1000 }}
      containers:
        - name: postgres-backup
          image: "{{ .Values.postgresBackup.image.repository }}:{{ .Values.postgresBackup.image.tag }}"
          imagePullPolicy: {{ .Values.postgresBackup.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-configmap
            - secretRef:
                name: {{ .Release.Name }}-secret
          env:
            - name: SCHEDULE
              value: {{ .Values.postgresBackup.schedule | default "@hourly" | quote }}
            - name: POSTGRES_HOST
              valueFrom:
                secretRef:
                  name: {{ .Release.Name }}-secret
                  key: POSTGRES_HOST
            - name: POSTGRES_DATABASE
              valueFrom:
                secretRef:
                  name: {{ .Release.Name }}-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretRef:
                  name: {{ .Release.Name }}-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretRef:
                  name: {{ .Release.Name }}-secret
                  key: POSTGRES_PASSWORD
            - name: S3_REGION
              valueFrom:
                configMapRef:
                  name: {{ .Release.Name }}-configmap
                  key: S3_REGION
            - name: S3_BUCKET
              valueFrom:
                configMapRef:
                  name: {{ .Release.Name }}-configmap
                  key: S3_BUCKET_NAME
            - name: S3_ENDPOINT
              valueFrom:
                configMapRef:
                  name: {{ .Release.Name }}-configmap
                  key: S3_ENDPOINT
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                configMapRef:
                  name: {{ .Release.Name }}-configmap
                  key: S3_ACCESS_KEY_ID
            - name: S3_SECRET_ACCESS_KEY
              valueFrom:
                secretRef:
                  name: {{ .Release.Name }}-secret
                  key: S3_SECRET_ACCESS_KEY
            - name: S3_PREFIX
              value: {{ .Values.postgresBackup.s3_prefix | default {{ .Release.Name }}-"POSTGRES_BACKUP" | quote }}
          resources:
            {{- toYaml .Values.postgresBackup.resources | nindent 12 }}
{{- end }}
