{{- if and .Values.traefik.enabled .Values.services.corsHandler.enabled }}
---
# CORS Handler Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pvpipe.fullname" . }}-cors-handler-config
  labels:
    {{- include "pvpipe.labels" . | nindent 4 }}
    app.kubernetes.io/component: cors-handler
  annotations:
    security.pvpipe.io/purpose: "Configuration for lightweight CORS preflight handler"
data:
  # Nginx configuration for CORS handler
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;
    
    # Security: Drop privileges after binding to port
    worker_rlimit_nofile 1024;
    
    events {
        worker_connections 512;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Security headers
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Logging format for security analysis
        log_format cors_access '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              '"$http_origin" "$http_access_control_request_method" '
                              '"$http_access_control_request_headers" '
                              'rt=$request_time uct="$upstream_connect_time" '
                              'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log cors_access;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Rate limiting for additional protection
        limit_req_zone $binary_remote_addr zone=cors_limit:10m rate=30r/s;
        
        server {
            listen {{ .Values.services.corsHandler.port | default 8080 }};
            server_name _;
            
            # Security: Disable server signature
            server_tokens off;
            
            # Health check endpoints
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
                add_header X-Health-Check "cors-handler" always;
            }
            
            location /ready {
                access_log off;
                return 200 "ready\n";
                add_header Content-Type text/plain;
                add_header X-Readiness-Check "cors-handler" always;
            }
            
            # CORS preflight handler - main endpoint
            location / {
                # Apply rate limiting
                limit_req zone=cors_limit burst=10 nodelay;
                
                # Only handle OPTIONS requests
                if ($request_method != OPTIONS) {
                    return 405 "Method Not Allowed - CORS handler only processes OPTIONS requests\n";
                }
                
                # Security: Validate Origin header format
                set $cors_origin "";
                if ($http_origin ~* ^https?://[a-zA-Z0-9\-\.]+(:[0-9]+)?$) {
                    set $cors_origin $http_origin;
                }
                
                # Enhanced CORS headers based on configuration
                add_header Access-Control-Allow-Methods "{{ join "," .Values.traefik.middleware.cors.allowMethods }}" always;
                add_header Access-Control-Allow-Headers "{{ join "," (.Values.traefik.middleware.cors.allowHeaders | default (list "Content-Type" "Authorization" "X-Requested-With")) }}" always;
                
                {{- if .Values.traefik.middleware.cors.enhanced.strictOrigins }}
                # Strict origin validation for production
                set $cors_allowed "false";
                {{- range .Values.traefik.middleware.cors.enhanced.allowOrigins }}
                if ($cors_origin = "{{ . }}") {
                    set $cors_allowed "true";
                }
                {{- end }}
                
                if ($cors_allowed = "true") {
                    add_header Access-Control-Allow-Origin $cors_origin always;
                }
                {{- else }}
                # Development mode - regex-based origin validation
                if ($cors_origin ~* ^https?://localhost(:[0-9]+)?$) {
                    add_header Access-Control-Allow-Origin $cors_origin always;
                }
                if ($cors_origin ~* ^https://.*\.tresor\.vn$) {
                    add_header Access-Control-Allow-Origin $cors_origin always;
                }
                if ($cors_origin ~* ^https://.*\.pvpipe\.com$) {
                    add_header Access-Control-Allow-Origin $cors_origin always;
                }
                {{- end }}
                
                add_header Access-Control-Max-Age "{{ .Values.traefik.middleware.cors.enhanced.maxAge | default 86400 }}" always;
                {{- if .Values.traefik.middleware.cors.enhanced.allowCredentials }}
                add_header Access-Control-Allow-Credentials "true" always;
                {{- end }}
                add_header Vary "Origin, Access-Control-Request-Method, Access-Control-Request-Headers" always;
                
                # Security and identification headers
                add_header X-CORS-Preflight "enhanced-handler" always;
                add_header X-CORS-Policy "{{ if .Values.traefik.middleware.cors.enhanced.strictOrigins }}strict-origin-validation{{ else }}development-permissive{{ end }}" always;
                add_header X-Request-ID $request_id always;
                add_header Cache-Control "public, max-age=86400" always;
                
                # Return success for OPTIONS
                return 204;
            }
            
            # Security: Block all other locations
            location ~ /\. {
                deny all;
                access_log off;
                log_not_found off;
            }
        }
    }

  # Additional security configuration
  security.conf: |
    # Security configuration for CORS handler
    
    # Rate limiting configuration
    RATE_LIMIT_REQUESTS_PER_SECOND={{ .Values.traefik.middleware.optionsRateLimit.enhanced.average | default 1200 | div 60 }}
    RATE_LIMIT_BURST={{ .Values.traefik.middleware.optionsRateLimit.enhanced.burst | default 300 }}
    
    # CORS configuration
    CORS_MAX_AGE={{ .Values.traefik.middleware.cors.enhanced.maxAge | default 86400 }}
    CORS_ALLOW_CREDENTIALS={{ .Values.traefik.middleware.cors.enhanced.allowCredentials | default false }}
    CORS_STRICT_ORIGINS={{ .Values.traefik.middleware.cors.enhanced.strictOrigins | default false }}
    
    # Security headers
    SECURITY_HEADERS_ENABLED={{ .Values.services.corsHandler.securityHeaders.enabled | default true }}
    
    # Logging configuration
    LOG_LEVEL={{ .Values.services.corsHandler.logLevel | default "info" }}
    ACCESS_LOG_ENABLED=true
    ERROR_LOG_ENABLED=true

{{- end }}