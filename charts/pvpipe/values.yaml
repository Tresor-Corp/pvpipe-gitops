# Main application
backend:
  enabled: true

replicaCount: 1

image:
  repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/pvpipe-backend
  tag: develop
  pullPolicy: Always
  pullSecrets: aws-registry
  annotations: {}

# Redis
redis:
  enabled: true
  image:
    repository: redis
    tag: alpine
  storage:
    size: 500M

# VNPTSignPDF
vnptsignpdf:
  enabled: true
  image:
    repository: luuhai48/vnptsignpdf
    tag: latest
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
# LocalSignPDF
localsignpdf:
  enabled: true
  image:
    repository: luuhai48/vnptsignpdf
    tag: latest
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
# Gotenberg
gotenberg:
  enabled: true
  image:
    repository: gotenberg/gotenberg
    tag: 8
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
# PgBouncer
pgbouncer:
  enabled: true  # Enabled by default for connection pooling
  image:
    repository: bitnami/pgbouncer
    tag: 1.24.0
    pullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  config:
    poolMode: transaction
    defaultPoolSize: 25
    maxClientConn: 100
    maxDbConnections: 50
    reservePoolSize: 5
    reservePoolTimeout: 3
    serverLifetime: 3600
    serverIdleTimeout: 600
    # Connection settings
    listenPort: 6432  # Bitnami PgBouncer default port
    listenAddr: "0.0.0.0"
    authType: md5
    adminUsers: pgbouncer
    statsUsers: pgbouncer
    # Log settings
    logConnections: 1
    logDisconnections: 1
    logPoolerErrors: 1

# Postgres Backup
postgresBackup:
  enabled: true
  image:
    repository: eeshugerman/postgres-backup-s3
    tag: "16"
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
# Meilisearch
meilisearch:
  enabled: true
  image:
    repository: getmeili/meilisearch
    tag: v1.11.0
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 7700
  environment: production
  # Master key is now read from MEILISEARCH_API_KEY environment variable
  dbPath: /meili_data
  persistence:
    enabled: true
    size: 1Gi
    mountPath: /meili_data
    storageClass: ""  # Leave empty to use default storage class
  resources:
    limits:
      cpu: "1"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"


# Command Center Microservice
commandCenter:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/command-center
    tag: latest
    pullPolicy: Always
  replicas: 1
  containerPort: 3000
  servicePort: 3000
  useReadOnlyDatabase: false
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""  # Leave empty to use default storage class
  env:
    GIN_MODE: "release"

# MS-Auth Microservice
msAuth:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-auth
    tag: latest
    pullPolicy: Always
  replicas: 1
  containerPort: 8080
  servicePort: 8080
  useReadOnlyDatabase: false
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  env:
    GIN_MODE: "release"

# MS-Files Microservice
msFiles:
  enabled: true
  # API deployment configuration
  api:
    image:
      repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-files
      tag: latest
      pullPolicy: Always
    replicas: 1
    containerPort: 8080
    servicePort: 8080
    useReadOnlyDatabase: false
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    env: {}
  # Worker deployment configuration
  worker:
    enabled: true
    image:
      repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-files-worker
      tag: latest
      pullPolicy: Always
    replicas: 1
    useReadOnlyDatabase: false
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    env: {}

# MS-Search Worker Microservice
msSearchWorker:
  polling:
    image:
      repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-search-worker-polling
      tag: latest
      pullPolicy: Always
    replicas: 1
    useReadOnlyDatabase: false
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    env: {}
  consume:
    image:
      repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-search-worker-consumer
      tag: latest
      pullPolicy: Always
    replicas: 1
    useReadOnlyDatabase: false
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    env: {}

# MS-Search Service Microservice
msSearchService:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-search-service
    tag: latest
    pullPolicy: Always
  replicas: 1
  containerPort: 8080
  servicePort: 8080
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  env:
    SERVER_PORT: "8080"
    SERVER_READ_TIMEOUT: "30s"
    SERVER_WRITE_TIMEOUT: "30s"
    SERVER_IDLE_TIMEOUT: "120s"
    AUTH_REALM: "Restricted"
    LOG_LEVEL: "info"

# MS-Email Microservice
msEmail:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-email
    tag: develop
    pullPolicy: Always
  replicas: 1
  containerPort: 8080
  servicePort: 8080
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  env: {}

# MS-Settings Microservice
msSettings:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-settings
    tag: latest
    pullPolicy: Always
  replicas: 1
  containerPort: 8082
  servicePort: 8082
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  env:
    NODE_ENV: "production"
    REDIS_PREFIX: "settings:"

  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  env: {}

# BullBoard Queue Dashboard
bullboard:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/tresor-bullboard
    tag: latest
    pullPolicy: Always
  replicas: 1
  containerPort: 3000
  servicePort: 3000
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  env: {}
  # Ingress configuration
  ingress:
    enabled: true
    className: nginx
    host: bullboard.tresor.vn
    # Basic auth users in htpasswd format
    # Default: admin:admin - CHANGE IN PRODUCTION!
    # Generate with: htpasswd -n username
    authUsers: ""  # Leave empty to use default admin:admin
    annotations:
      cert-manager.io/cluster-issuer: cluster-issuer-tresor.vn
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: "{{ .Release.Name }}-bullboard-auth"
      nginx.ingress.kubernetes.io/auth-realm: "BullBoard Authentication Required"

# Traefik API Gateway
traefik:
  enabled: true
  # Traefik chart values
  service:
    type: ClusterIP
  ports:
    web:
      port: 8000
      expose:
        default: true
      exposedPort: 80
      protocol: TCP
    traefik:
      port: 9000
      expose:
        default: true  # Must be true to create the service port
      exposedPort: 9000
      protocol: TCP
  ingressRoute:
    dashboard:
      enabled: false  # Disabled to prevent /api path conflict with backend
  globalArguments: []
  additionalArguments:
    - "--providers.kubernetescrd.namespaces=$(POD_NAMESPACE)"
    - "--providers.kubernetescrd.allowCrossNamespace=false"
    - "--api.dashboard=true"
    - "--api.insecure=true"  # API is now safe on separate port 9000
    - "--log.level=DEBUG"
    - "--accesslog=true"
    - "--accesslog.fields.defaultmode=keep"
    - "--accesslog.fields.headers.defaultmode=keep"
    - "--entrypoints.web.http.maxHeaderBytes=0"
  rbac:
    enabled: true
    namespaced: true
  deployment:
    podAnnotations:
      "namespace-isolation": "true"
  providers:
    kubernetesCRD:
      enabled: true
      allowCrossNamespace: false
      namespaces: []  # Empty array forces current namespace only
    kubernetesIngress:
      enabled: false
  logs:
    general:
      level: INFO
    access:
      enabled: true
  metrics:
    prometheus:
      enabled: true
  # API Gateway configuration
  apiGateway:
    host: api.tresor.vn
  # Ingress configuration for API Gateway
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: cluster-issuer-tresor.vn
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      external-dns.alpha.kubernetes.io/hostname: "ingress.tresor.vn"
    tls: []
  # Microservices routing configuration
  routes:
    # Root catch-all route
    root:
      enabled: true
      pathPrefix: /
      stripPrefix: false
      service: "{{ .Release.Name }}-backend"
      port: 8000
      protected: false
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
    # Example microservice routes (disabled by default)
    docs:
      enabled: false
      pathPrefix: /api/docs
      stripPrefix: true
      service: "{{ .Release.Name }}-docs"
      port: 3000
      protected: false  # Public documentation
      middlewares:
        - rate-limit
        - headers
        - compress
    users:
      enabled: false
      pathPrefix: /api/v1/users
      stripPrefix: true
      service: "{{ .Release.Name }}-users"
      port: 8080
      protected: true  # Requires JWT authentication
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
    auth:
      enabled: false
      pathPrefix: /api/auth
      stripPrefix: true
      service: "{{ .Release.Name }}-auth"
      port: 8080
      protected: false  # Auth endpoints are public (login, register, etc.)
      middlewares:
        - rate-limit
        - headers
        - compress
    # Command Center Audit Service
    command-center:
      enabled: true
      pathPrefix: /command-center
      stripPrefix: true
      service: "{{ .Release.Name }}-command-center"
      port: 3000
      protected: false  # Protected by API key
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
    # MS-Files Service - API endpoints for file operations (CRUD, metadata, etc.)
    ms-files-api:
      enabled: true
      pathPrefix: /api/v1/files
      stripPrefix: true
      service: "{{ .Release.Name }}-ms-files-api"
      port: 8080
      protected: true  # Requires JWT authentication for API operations
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
    # MS-Files Service - Direct file serving (images, downloads, static content)
    ms-files-serve:
      enabled: true
      pathPrefix: /v1/files
      stripPrefix: true
      service: "{{ .Release.Name }}-ms-files-api"
      port: 8080
      protected: true  # JWT via cookie for browser file access
      middlewares:
        - rate-limit
        - headers
        - retry
    # MS-Auth Service - Specific public authentication endpoints only
    ms-auth:
      enabled: true
      pathPrefix: /api/auth/(login|register-otp|verify-otp|refresh-token)
      useRegex: true  # Use regex matching for specific endpoints
      stripPrefix: false  # Keep /api/auth prefix
      service: "{{ .Release.Name }}-ms-auth"
      port: 8080
      protected: false  # Public endpoints
      middlewares:
        - rate-limit
        - headers
        - cors
    # MS-Search Service
    ms-search-service:
      enabled: true
      pathPrefix: /api/v1/search
      stripPrefix: false
      service: "{{ .Release.Name }}-ms-search-service"
      port: 8080
      protected: true  # Requires authentication
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
    # MS-Email Service
    ms-email:
      enabled: true
      pathPrefix: /ms-email
      stripPrefix: true
      service: "{{ .Release.Name }}-ms-email"
      port: 8000
      protected: true  # Requires authentication
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
    # MS-Settings Service
    ms-settings:
      enabled: true
      pathPrefix: /api/v1/settings
      stripPrefix: false
      service: "{{ .Release.Name }}-ms-settings"
      port: 8082
      protected: false  # Authentication handled at service level
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
    # MS-Notifications Service
    ms-notifications:
      enabled: true
      pathPrefix: /api/v1/notifications
      stripPrefix: true
      service: "{{ .Release.Name }}-ms-notifications-api"
      port: 8080
      protected: true  # Requires authentication
      middlewares:
        - rate-limit
        - headers
        - retry
        - compress
        - cors
  dashboard:
    enabled: false
  # Middleware configurations
  middleware:
    rateLimit:
      enabled: true
      average: 100
      period: 1m
      burst: 50
    headers:
      enabled: true
      stsSeconds: 31536000
      stsIncludeSubdomains: true
      stsPreload: true
      forceSTSHeader: true
      contentTypeNosniff: true
      browserXssFilter: true
      customRequestHeaders:
        X-Forwarded-Proto: https
      customResponseHeaders:
        X-Content-Type-Options: nosniff
        X-Frame-Options: DENY
        X-XSS-Protection: 1; mode=block
    retry:
      enabled: true
      attempts: 3
      initialInterval: 100ms
    circuitBreaker:
      enabled: true
      expression: "NetworkErrorRatio() > 0.30 || ResponseCodeRatio(500, 600, 0, 600) > 0.50"
    compress:
      enabled: true
    basicAuth:
      enabled: false
    cors:
      enabled: true
      allowMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
        - PATCH
      allowHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
      allowOrigins:
        - "*"
      maxAge: 3600
      addVaryHeader: true
    forwardAuth:
      enabled: true
    # Enhanced OPTIONS-specific middleware configurations
    optionsRateLimit:
      enhanced:
        enabled: true
        average: 1200  # 20 req/sec as recommended by security review
        period: "1m"
        burst: 300
        depth: 2  # X-Forwarded-For depth for real IP detection
        trustedIPs: []  # Additional trusted IP ranges (customize for your environment)
    originValidation:
      enabled: true
    cors:
      enhanced:
        enabled: true
        strictOrigins: false  # Set to true in production
        allowOrigins:
          - "https://app.tresor.vn"
          - "https://pvpipe.tresor.vn"
          - "https://admin.tresor.vn"
        allowOriginRegex:
          - "^https?://localhost(:[0-9]+)?$"
          - "^https?://127\\.0\\.0\\.1(:[0-9]+)?$"
          - "^https://.*\\.tresor\\.vn$"
          - "^https://.*\\.pvpipe\\.com$"
        additionalHeaders:
          - "X-File-Name"
          - "X-API-Version"
          - "X-Request-ID"
        maxAge: 86400  # 24 hours for preflight cache
        allowCredentials: false
    optionsMonitoring:
      enabled: false  # Enable in production for security analysis
  # Enhanced OPTIONS route configuration
  optionsRoute:
    enabled: true
    priority: 150  # Higher than default routes (100+)
    useMainBackend: true  # Fallback to main backend if CORS handler not available
    fallback:
      enabled: true
      pathPrefix: "/api"
      priority: 140
  # TLS configuration for HTTPS
  tls:
    enabled: false
    secretName: ""
    domains: []
    options: ""

# CORS Handler Service Configuration (optional dedicated service)
services:
  corsHandler:
    enabled: false  # Set to true to use dedicated CORS handler instead of main backend
    replicas: 2
    port: 8080
    image:
      repository: "nginx"
      tag: "alpine"
      pullPolicy: "IfNotPresent"
    resources:
      limits:
        cpu: "100m"
        memory: "64Mi"
      requests:
        cpu: "50m"
        memory: "32Mi"
    healthCheck:
      enabled: true
      path: "/health"
      interval: "30s"
      timeout: "3s"
    service:
      type: "ClusterIP"
      annotations: {}

# Network Policy Configuration
networkPolicy:
  corsHandler:
    enabled: false  # Set to true to enable network isolation for CORS handler

# MS-Notifications Microservice
msNotifications:
  enabled: true
  image:
    repository: 533267304975.dkr.ecr.ap-southeast-1.amazonaws.com/tresor/ms-notifications
    tag: latest
    pullPolicy: Always
  replicas: 2
  containerPort: 8080
  servicePort: 8080
  # API container resources
  api:
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
  # Worker container resources
  worker:
    resources:
      limits:
        cpu: "400m"
        memory: "256Mi"
      requests:
        cpu: "200m"
        memory: "128Mi"
  env:
    GIN_MODE: "release"
    WORKER_CONCURRENCY: "10"
    QUEUE_PRIORITIES: "critical:10,high:6,normal:4,low:2,bulk:1"

# Environment variables

